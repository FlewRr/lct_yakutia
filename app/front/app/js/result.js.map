{"version":3,"file":"./js/result.js","mappings":"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AO,OAAO;IAChB;EACF;EAEA,SAAST,YAAYA,CAACU,aAAa,EAAE;IACnC,IAAIA,aAAa,IAAI,EAAE,EAAE;MACvB,OAAO,kDAAkD;IAC3D,CAAC,MAAM,IAAIA,aAAa,IAAI,EAAE,EAAE;MAC9B,OAAO,mFAAmF;IAC5F,CAAC,MAAM;MACL,OAAO,kDAAkD;IAC3D;EACF;AAEJ,CAAC,CAAC;;AAIF;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACvYA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC9GA;AACA,2hBAA2hB,mDAAmD;AAC9kB;AACA,iEAAe,IAAI;;;;;;;;;;;;ACHnB;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack:///./js/result.js","webpack:///./js/result_sort.js","webpack:///./result.html","webpack:///./scss/result.scss?092d","webpack:///webpack/bootstrap","webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/before-startup","webpack:///webpack/startup","webpack:///webpack/after-startup"],"sourcesContent":["import '../result.html';\r\nimport '../scss/result.scss';\r\nimport './result_sort';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst crl = document.getElementById('myCircl').getContext('2d');\r\nconst ctx = document.getElementById('myChart').getContext('2d');\r\n\r\nconst massPep = document.getElementById('mass-pep');\r\n\r\nconst belowThan30 = document.getElementById('lessThan30');\r\nconst MoreThan30 = document.getElementById('MoreThan30');\r\nconst MoreThan60 = document.getElementById('MoreThan60');\r\n\r\n\r\n// ПРЕОБРАЗОВАНИЕ JSON\r\n\r\n// const data = require('./prediction.json');\r\n\r\n// const people = Object.entries(data).map(([key, value]) => ({\r\n//   name: key,\r\n//   percent: Math.round(value * 100)\r\n// }));\r\n\r\n// export default people;\r\n\r\nconst container = document.getElementById('data-container');\r\nconst rawData = container.getAttribute('data-mydata');\r\n\r\n// const data = JSON.parse(rawData);\r\nconst data = rawData ? eval(`(${rawData})`) : {}; \r\n\r\nconsole.log(data);\r\n\r\nconst people = Object.entries(data).map(([key, value]) => ({\r\n  name: key,\r\n  percent: Math.round(value * 100)\r\n}));\r\n\r\n\r\nconst pepCount = people.length;\r\nmassPep.innerHTML = pepCount;\r\n\r\nconst greaterThan60 = people.filter(person => person.percent > 60).length;\r\nconst between31And60 = people.filter(person => person.percent >= 31 && person.percent <= 60).length;\r\nconst lessThan30 = people.filter(person => person.percent <= 30).length;\r\n\r\nbelowThan30.innerHTML = `${lessThan30} - Менее 30%`\r\nMoreThan30.innerHTML = `${between31And60} - Более 30%`\r\nMoreThan60.innerHTML = `${greaterThan60} - Более 60%`\r\n\r\n\r\nnew Chart(crl, {\r\n  type: 'doughnut', // тип графика\r\n  data: {\r\n    labels: ['Больше 60%', 'Больше 30%', 'До 30%'],\r\n    datasets: [{\r\n      label: 'Колличество человек',\r\n      data: [greaterThan60, between31And60, lessThan30,],\r\n      backgroundColor: [\r\n        '#8F0B0B',\r\n        '#F38137',\r\n        '#61B124'\r\n      ], \r\n      borderColor: '#000', // цвет границы\r\n      borderWidth: 1, // ширина границы\r\n    }]\r\n  },\r\n  options: {\r\n    cutout: '80%',\r\n    plugins: {\r\n      legend: {\r\n        display: false, // Скрыть легенду\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst dataPoints = people.map(person => person.percent);\r\n\r\n// Определение оптимального количества бинов\r\nconst binCount = Math.ceil(Math.sqrt(dataPoints.length));\r\n\r\n// Разбиение данных на бины\r\nconst bins = Array.from({ length: binCount }, (_, index) => ({\r\n  min: (index / binCount) * 100,\r\n  max: ((index + 1) / binCount) * 100,\r\n  count: 0,\r\n}));\r\n\r\n// Подсчет количества сотрудников в каждом бине\r\ndataPoints.forEach(percent => {\r\n  const binIndex = bins.findIndex(bin => percent >= bin.min && percent < bin.max);\r\n  if (binIndex !== -1) {\r\n    bins[binIndex].count += 1;\r\n  }\r\n});\r\n\r\n// Создание гистограммы\r\nnew Chart(ctx, {\r\n  type: 'bar',\r\n  data: {\r\n    labels: bins.map(bin => `${bin.min.toFixed(0)}% - ${bin.max.toFixed(0)}%`),\r\n    datasets: [{\r\n      label: 'Распределение сотрудников по вероятности увольнения',\r\n      data: bins.map(bin => bin.count),\r\n      backgroundColor: '#372373D1',\r\n      borderColor: '#29255BD1',\r\n      borderWidth: 1,\r\n    }],\r\n  },\r\n  options: {\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n            font: {\r\n              family: 'Jura',\r\n              size: 20,\r\n            }\r\n          }\r\n        },\r\n\r\n      tooltip: {\r\n          enabled: false,\r\n          bodyFontColor: '#FFF', // Цвет текста в подсказках\r\n          titleFontColor: '#FFF', // Цвет заголовка подсказки\r\n      }\r\n  },\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          color: '#7E7A7A',\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n        grid: {\r\n          color: '#7E7A7A',\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\n//  КОД С СОРТ ДС\r\n\r\nconst sortButton = document.querySelector('.sort-button');\r\nconst sortMethods = document.querySelector('.sort-methods');\r\nconst sortArrow = document.querySelector('.sort-arrow');\r\nconst sortType = document.getElementById('sortType');\r\n\r\n\r\nsortButton.addEventListener('click', (event) => {\r\n  event.stopPropagation();\r\n\r\n  sortMethods.classList.add('sort-methods-before');\r\n  sortArrow.classList.add('sort-arrow-click');\r\n})\r\n\r\ndocument.addEventListener('click', (event) => {\r\n  if (!sortMethods.contains(event.target)) {\r\n    sortMethods.classList.remove('sort-methods-before');\r\n    sortArrow.classList.remove('sort-arrow-click');\r\n  }\r\n})\r\n\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n\r\n    const personScroll = document.querySelector('.person-scroll');\r\n    let peopleData = [...people]; // Создаем копию массива для избежания мутаций оригинального массива\r\n    let html = '';\r\n\r\n    function renderPeople(data) {\r\n      html = '';\r\n  \r\n      data.forEach((man) => {\r\n        const barWidth = `${man.percent}%`;\r\n        const barColour = `${threatColour(man.percent)}`;\r\n  \r\n        html += `\r\n          <div class=\"person\">\r\n            <div class=\"fio-and-bar\">\r\n              <span class=\"person-name\">${man.name}</span>\r\n              <div class=\"bar-holder\">\r\n                <div class=\"bar\" style=\"width: ${barWidth}; background: ${barColour};\"></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"person-percent\">\r\n              <div class=\"percent-holder\">\r\n                <p>${man.percent}%<br>${threatLevel(man.percent)}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        `;\r\n      });\r\n  \r\n      personScroll.innerHTML = html;\r\n    }\r\n  \r\n    function sortByPercentDecreasing() {\r\n      peopleData = [...peopleData].sort((a, b) => b.percent - a.percent);\r\n      renderPeople(peopleData);\r\n      sortType.innerHTML = 'По убыванию';\r\n    }\r\n  \r\n    function sortByPercentIncreasing() {\r\n      peopleData = [...peopleData].sort((a, b) => a.percent - b.percent);\r\n      renderPeople(peopleData);\r\n      sortType.innerHTML = 'По возрастанию';\r\n    }\r\n  \r\n    // Добавляем слушатели для кнопок сортировки\r\n    const setMethodButton = document.getElementById('setMethod');\r\n    setMethodButton.addEventListener('click', () => {\r\n      sortByPercentDecreasing();\r\n      sortMethods.classList.remove('sort-methods-before');\r\n      sortArrow.classList.remove('sort-arrow-click');\r\n    });\r\n  \r\n  \r\n    const riseMethodButton = document.getElementById('riseMethod');\r\n    riseMethodButton.addEventListener('click', () => {\r\n      sortByPercentIncreasing();\r\n      sortMethods.classList.remove('sort-methods-before');\r\n      sortArrow.classList.remove('sort-arrow-click');\r\n    });\r\n  \r\n    // Инициализация отображения при загрузке\r\n    renderPeople(peopleData);\r\n\r\n    function threatLevel(percent_lvl) {\r\n      if (percent_lvl >= 60) {\r\n        return 'Расчет';\r\n      } else if (percent_lvl >= 30) {\r\n        return 'Средний';\r\n      } else {\r\n        return 'Норма';\r\n      }\r\n    }\r\n    \r\n    function threatColour(percent_lvl_2) {\r\n      if (percent_lvl_2 >= 60) {\r\n        return 'linear-gradient(90deg, #BE1414 0%, #8A0909 100%)';\r\n      } else if (percent_lvl_2 >= 30) {\r\n        return 'linear-gradient(90deg, rgba(255, 153, 0, 0.74) 0%, rgba(255, 61, 0, 0.74) 99.93%)';\r\n      } else {\r\n        return 'linear-gradient(90deg, #7ADE2D 0%, #5AA521 100%)';\r\n      }\r\n    }\r\n  \r\n});\r\n\r\n\r\n\r\n// export { people };\r\n// export стоял перер всей функцией fetchData\r\n\r\n\r\n// let people = [];\r\n// let greaterThan60, between31And60, lessThan30;\r\n\r\n// export const fetchData = async () => {\r\n//   try {\r\n//     const response = await fetch('json/prediction.json');\r\n//     const data = await response.json();\r\n\r\n//     console.log('Data from JSON:', data);\r\n\r\n//     people = Object.entries(data).map(([key, value]) => ({\r\n//       name: key,\r\n//       percent: Math.round(value * 100)\r\n//     }));\r\n\r\n//     const pepCount = people.length;\r\n//     massPep.innerHTML = pepCount;\r\n\r\n//     greaterThan60 = people.filter(person => person.percent > 60).length;\r\n//     between31And60 = people.filter(person => person.percent >= 31 && person.percent <= 60).length;\r\n//     lessThan30 = people.filter(person => person.percent <= 30).length;\r\n\r\n//     belowThan30.innerHTML = `${lessThan30} - Менее 30%`;\r\n//     MoreThan30.innerHTML = `${between31And60} - Более 30%`;\r\n//     MoreThan60.innerHTML = `${greaterThan60} - Более 60%`;\r\n\r\n//     drawCharts(); \r\n\r\n//     return people;\r\n\r\n//   } catch (error) {\r\n//     console.error('Ошибка загрузки данных', error);\r\n//   }\r\n// };\r\n\r\n// export { people };\r\n\r\n// const drawCharts = () => {\r\n\r\n//   const dataPoints = people.map(person => person.percent);\r\n\r\n//   // Определение оптимального количества бинов\r\n//   const binCount = Math.ceil(Math.sqrt(dataPoints.length));\r\n\r\n//   // Разбиение данных на бины\r\n//   const bins = Array.from({ length: binCount }, (_, index) => ({\r\n//     min: (index / binCount) * 100,\r\n//     max: ((index + 1) / binCount) * 100,\r\n//     count: 0,\r\n//   }));\r\n\r\n//   // Подсчет количества сотрудников в каждом бине\r\n//   dataPoints.forEach(percent => {\r\n//     const binIndex = bins.findIndex(bin => percent >= bin.min && percent < bin.max);\r\n//     if (binIndex !== -1) {\r\n//       bins[binIndex].count += 1;\r\n//     }\r\n//   });\r\n\r\n//   new Chart(ctx, {\r\n//     type: 'bar',\r\n//     data: {\r\n//       labels: bins.map(bin => `${bin.min.toFixed(0)}% - ${bin.max.toFixed(0)}%`),\r\n//       datasets: [{\r\n//         label: 'Распределение сотрудников по вероятности увольнения',\r\n//         data: bins.map(bin => bin.count),\r\n//         backgroundColor: '#372373D1',\r\n//         borderColor: '#29255BD1',\r\n//         borderWidth: 1,\r\n//       }],\r\n//     },\r\n//     options: {\r\n//       plugins: {\r\n//         legend: {\r\n//           labels: {\r\n//             font: {\r\n//               family: 'Jura',\r\n//               size: 20,\r\n//             }\r\n//           }\r\n//         },\r\n\r\n//         tooltip: {\r\n//           enabled: false,\r\n//           bodyFontColor: '#FFF',\r\n//           titleFontColor: '#FFF', \r\n//         }\r\n//       },\r\n//       scales: {\r\n//         x: {\r\n//           grid: {\r\n//             color: '#7E7A7A',\r\n//           },\r\n//         },\r\n//         y: {\r\n//           beginAtZero: true,\r\n//           grid: {\r\n//             color: '#7E7A7A',\r\n//           },\r\n//         },\r\n//       },\r\n//     },\r\n//   });\r\n\r\n\r\n//   new Chart(crl, {\r\n//     type: 'doughnut',\r\n//     data: {\r\n//       labels: ['Больше 60%', 'Больше 30%', 'До 30%'],\r\n//       datasets: [{\r\n//         label: 'Колличество человек',\r\n//         data: [greaterThan60, between31And60, lessThan30],\r\n//         backgroundColor: [\r\n//           '#8F0B0B',\r\n//           '#F38137',\r\n//           '#61B124'\r\n//         ],\r\n//         borderColor: '#000', \r\n//         borderWidth: 1, \r\n//       }]\r\n//     },\r\n//     options: {\r\n//       cutout: '80%',\r\n//       plugins: {\r\n//         legend: {\r\n//           display: false,\r\n//         }\r\n//       }\r\n//     }\r\n//   });\r\n// };\r\n\r\n// fetchData();\r\n","\r\n// import { fetchData, people } from './result';\r\n\r\n// const sortButton = document.querySelector('.sort-button');\r\n// const sortMethods = document.querySelector('.sort-methods');\r\n// const sortArrow = document.querySelector('.sort-arrow');\r\n// const sortType = document.getElementById('sortType');\r\n\r\n// import people from './result.js';\r\n\r\n// sortButton.addEventListener('click', (event) => {\r\n//   event.stopPropagation();\r\n\r\n//   sortMethods.classList.add('sort-methods-before');\r\n//   sortArrow.classList.add('sort-arrow-click');\r\n// })\r\n\r\n// document.addEventListener('click', (event) => {\r\n//   if (!sortMethods.contains(event.target)) {\r\n//     sortMethods.classList.remove('sort-methods-before');\r\n//     sortArrow.classList.remove('sort-arrow-click');\r\n//   }\r\n// })\r\n\r\n\r\n\r\n// document.addEventListener(\"DOMContentLoaded\", async () => {\r\n\r\n//     const personScroll = document.querySelector('.person-scroll');\r\n//     let peopleData = [...people]; // Создаем копию массива для избежания мутаций оригинального массива\r\n//     let html = '';\r\n\r\n//     function renderPeople(data) {\r\n//       html = '';\r\n  \r\n//       data.forEach((man) => {\r\n//         const barWidth = `${man.percent}%`;\r\n//         const barColour = `${threatColour(man.percent)}`;\r\n  \r\n//         html += `\r\n//           <div class=\"person\">\r\n//             <div class=\"fio-and-bar\">\r\n//               <span class=\"person-name\">${man.name}</span>\r\n//               <div class=\"bar-holder\">\r\n//                 <div class=\"bar\" style=\"width: ${barWidth}; background: ${barColour};\"></div>\r\n//               </div>\r\n//             </div>\r\n//             <div class=\"person-percent\">\r\n//               <div class=\"percent-holder\">\r\n//                 <p>${man.percent}%<br>${threatLevel(man.percent)}</p>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         `;\r\n//       });\r\n  \r\n//       personScroll.innerHTML = html;\r\n//     }\r\n  \r\n//     function sortByPercentDecreasing() {\r\n//       peopleData = [...peopleData].sort((a, b) => b.percent - a.percent);\r\n//       renderPeople(peopleData);\r\n//       sortType.innerHTML = 'По убыванию';\r\n//     }\r\n  \r\n//     function sortByPercentIncreasing() {\r\n//       peopleData = [...peopleData].sort((a, b) => a.percent - b.percent);\r\n//       renderPeople(peopleData);\r\n//       sortType.innerHTML = 'По возрастанию';\r\n//     }\r\n  \r\n//     // Добавляем слушатели для кнопок сортировки\r\n//     const setMethodButton = document.getElementById('setMethod');\r\n//     setMethodButton.addEventListener('click', () => {\r\n//       sortByPercentDecreasing();\r\n//       sortMethods.classList.remove('sort-methods-before');\r\n//       sortArrow.classList.remove('sort-arrow-click');\r\n//     });\r\n  \r\n  \r\n//     const riseMethodButton = document.getElementById('riseMethod');\r\n//     riseMethodButton.addEventListener('click', () => {\r\n//       sortByPercentIncreasing();\r\n//       sortMethods.classList.remove('sort-methods-before');\r\n//       sortArrow.classList.remove('sort-arrow-click');\r\n//     });\r\n  \r\n//     // Инициализация отображения при загрузке\r\n//     renderPeople(peopleData);\r\n\r\n//     function threatLevel(percent_lvl) {\r\n//       if (percent_lvl >= 60) {\r\n//         return 'Расчет';\r\n//       } else if (percent_lvl >= 30) {\r\n//         return 'Средний';\r\n//       } else {\r\n//         return 'Норма';\r\n//       }\r\n//     }\r\n    \r\n//     function threatColour(percent_lvl_2) {\r\n//       if (percent_lvl_2 >= 60) {\r\n//         return 'linear-gradient(90deg, #BE1414 0%, #8A0909 100%)';\r\n//       } else if (percent_lvl_2 >= 30) {\r\n//         return 'linear-gradient(90deg, rgba(255, 153, 0, 0.74) 0%, rgba(255, 61, 0, 0.74) 99.93%)';\r\n//       } else {\r\n//         return 'linear-gradient(90deg, #7ADE2D 0%, #5AA521 100%)';\r\n//       }\r\n//     }\r\n  \r\n// });\r\n\r\n\r\n","// Module\nvar code = \"<!DOCTYPE html>\\r\\n<html lang=\\\"en\\\">\\r\\n<head>\\r\\n  <meta charset=\\\"UTF-8\\\">\\r\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\r\\n  \\r\\n  <link rel=\\\"preconnect\\\" href=\\\"https://fonts.googleapis.com\\\">\\r\\n  <link rel=\\\"preconnect\\\" href=\\\"https://fonts.gstatic.com\\\" crossorigin>\\r\\n  <link href=\\\"https://fonts.googleapis.com/css2?family=Jura&display=swap\\\" rel=\\\"stylesheet\\\">\\r\\n\\r\\n  <title>Document</title>\\r\\n</head>\\r\\n<body>\\r\\n\\r\\n  \\r\\n  <div id=\\\"data-container\\\" \\r\\n  data-mydata=\\\"{'73': 0.5817312672602384, '74': 0.8996248648216517}\\\"></div>\\r\\n\\r\\n  <div class=\\\"container\\\">\\r\\n\\r\\n    <h1>Статистика</h1>\\r\\n\\r\\n    <div class=\\\"result-grid\\\">\\r\\n\\r\\n      <div class=\\\"item1 grid-block\\\">\\r\\n\\r\\n        <div class=\\\"sorting\\\">\\r\\n\\r\\n          <div class=\\\"sort-button\\\">\\r\\n            <span class=\\\"sort-type\\\" id=\\\"sortType\\\">Выберите тип</span>\\r\\n            <div class=\\\"sort-arrow\\\">\\r\\n              <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"14\\\" viewBox=\\\"0 0 24 14\\\" fill=\\\"none\\\">\\r\\n                <path d=\\\"M10.9393 13.0934C11.5251 13.6792 12.4749 13.6792 13.0607 13.0934L22.6066 3.54751C23.1924 2.96172 23.1924 2.01197 22.6066 1.42619C22.0208 0.840399 21.0711 0.840399 20.4853 1.42619L12 9.91147L3.51472 1.42619C2.92893 0.840399 1.97919 0.840399 1.3934 1.42619C0.807613 2.01197 0.807613 2.96172 1.3934 3.54751L10.9393 13.0934ZM10.5 11V12.0328H13.5V11L10.5 11Z\\\" fill=\\\"white\\\"/>\\r\\n              </svg>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"sort-methods\\\">\\r\\n            <p id=\\\"setMethod\\\">По убыванию</p>\\r\\n            <p id=\\\"riseMethod\\\">По возрастанию</p>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"person-scroll\\\">\\r\\n\\r\\n          <div class=\\\"person\\\">\\r\\n\\r\\n            <div class=\\\"fio-and-bar\\\">\\r\\n              \\r\\n              <span class=\\\"person-name\\\">Иванов Иван Иванович</span>\\r\\n              <div class=\\\"bar-holder\\\">\\r\\n                <div class=\\\"bar\\\">\\r\\n                  \\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"person-percent\\\">\\r\\n              <div class=\\\"percent-holder\\\">\\r\\n                <p> 53% <br> Внимание</p>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"person\\\">\\r\\n\\r\\n            <div class=\\\"fio-and-bar\\\">\\r\\n              \\r\\n              <span class=\\\"person-name\\\">Иванов Иван Иванович</span>\\r\\n              <div class=\\\"bar-holder\\\">\\r\\n                <div class=\\\"bar\\\">\\r\\n                  \\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"person-percent\\\">\\r\\n              <p> 53% <br> Внимание</p>\\r\\n            </div>\\r\\n\\r\\n            <!-- <div class=\\\"person-item\\\" data-name=\\\"Иванов Иван Иванович\\\" data-percentage=\\\"20\\\">Иванов Иван Иванович - 20%</div> -->\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"item2 grid-block\\\">\\r\\n\\r\\n        <div class=\\\"myCircl-holder\\\">\\r\\n          <canvas id=\\\"myCircl\\\"></canvas>\\r\\n          <div class=\\\"chelick-holder\\\">\\r\\n            <p id=\\\"mass-pep\\\"></p>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"myCircl-stat\\\">\\r\\n          <div class=\\\"cirxl-stat-holder\\\">\\r\\n            <p id=\\\"lessThan30\\\"></p>\\r\\n          </div>\\r\\n          <div class=\\\"cirxl-stat-holder\\\">\\r\\n            <p id=\\\"MoreThan30\\\"></p>\\r\\n          </div>\\r\\n          <div class=\\\"cirxl-stat-holder\\\">\\r\\n            <p id=\\\"MoreThan60\\\"></p>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"item3 grid-block\\\">\\r\\n        <div class=\\\"myChart-holder\\\">\\r\\n          <canvas id=\\\"myChart\\\"></canvas>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</body>\\r\\n</html>\";\n// Exports\nexport default code;","// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"result\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_chart_js_auto_auto_js\"], () => (__webpack_require__(\"./js/result.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["Chart","crl","document","getElementById","getContext","ctx","massPep","belowThan30","MoreThan30","MoreThan60","container","rawData","getAttribute","data","eval","console","log","people","Object","entries","map","key","value","name","percent","Math","round","pepCount","length","innerHTML","greaterThan60","filter","person","between31And60","lessThan30","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","cutout","plugins","legend","display","dataPoints","binCount","ceil","sqrt","bins","Array","from","_","index","min","max","count","forEach","binIndex","findIndex","bin","toFixed","font","family","size","tooltip","enabled","bodyFontColor","titleFontColor","scales","x","grid","color","y","beginAtZero","sortButton","querySelector","sortMethods","sortArrow","sortType","addEventListener","event","stopPropagation","classList","add","contains","target","remove","personScroll","peopleData","html","renderPeople","man","barWidth","barColour","threatColour","threatLevel","sortByPercentDecreasing","sort","a","b","sortByPercentIncreasing","setMethodButton","riseMethodButton","percent_lvl","percent_lvl_2"],"sourceRoot":""}